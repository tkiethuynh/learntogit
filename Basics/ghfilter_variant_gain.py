import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np

weights = [158.0, 164.2, 160.3, 159.9, 162.1, 164.6,
           169.6, 167.4, 166.4, 171.0, 171.2, 172.6]

time_step = 1.0  # day
weight_scale = 4./10
gain_scale = 1./3


def plot_measurements(xs, ys=None, dt=None, color='k', lw=1, label='Measurements', lines=False, **kwargs):
    if ys is None and dt is not None:
        ys = xs
        xs = np.arrange(0, len(ys)*dt, dt)

    plt.autoscale(tight=False)
    if lines:
        if ys is not None:
            return plt.plot(xs, ys, color=color, lw=lw, ls='--', label=label, **kwargs)
        else:
            return plt.plot(xs, color=color, lw=lw, ls='--', label=label, **kwargs)
    else:
        if ys is not None:
            return plt.scatter(xs, ys, edgecolor=color, facecolor='none', lw=2, label=label, **kwargs)
        else:
            return plt.scatter(range(len(xs)), xs, edgecolor=color, facecolor='none', lw=2, label=label, **kwargs)


def plot_filter(xs, ys=None, dt=None, c='C0', label='Filter', var=None, **kwargs):
    """ plot result of KF with color `c`, optionally displaying the variance
    of `xs`. Returns the list of lines generated by plt.plot()"""

    if ys is None and dt is not None:
        ys = xs
        xs = np.arange(0, len(ys) * dt, dt)
    if ys is None:
        ys = xs
        xs = range(len(ys))

    lines = plt.plot(xs, ys, color=c, label=label, **kwargs)
    if var is None:
        return lines

    var = np.asarray(var)
    std = np.sqrt(var)
    std_top = ys+std
    std_btm = ys-std

    plt.plot(xs, ys+std, linestyle=':', color='k', lw=2)
    plt.plot(xs, ys-std, linestyle=':', color='k', lw=2)
    plt.fill_between(xs, std_btm, std_top,
                     facecolor='yellow', alpha=0.2)

    return lines


def plot_track(xs, ys=None, dt=None, label='Track', c='k', lw=2, **kwargs):
    if ys is None and dt is not None:
        ys = xs
        xs = np.arange(0, len(ys)*dt, dt)
    if ys is not None:
        return plt.plot(xs, ys, color=c, lw=lw, ls=':', label=label, **kwargs)
    else:
        return plt.plot(xs, color=c, lw=lw, ls=':', label=label, **kwargs)


def set_labels(title=None, x=None, y=None):
    """ helps make code in book shorter. Optional set title, xlabel and ylabel
    """
    if x is not None:
        plt.xlabel(x)
    if y is not None:
        plt.ylabel(y)
    if title is not None:
        plt.title(title)


def plot_gh_results(weights, estimates, predictions, actual, time_step=0):
    n = len(weights)
    if time_step > 0:
        rng = range(1, n+1)
    else:
        rng = range(n, n+1)
    xs = range(n+1)
    plot_measurements(range(1, len(weights)+1),
                      weights, color='k', lines=False)
    plot_filter(xs, estimates, marker='o', label='Estimates')
    plot_track(xs[1:], predictions, c='r', marker='v', label='Predictions')
    plt.plot([xs[0], xs[-1]], actual, c='k', lw=1, label='Actual')
    plt.legend(loc=4)
    set_labels(x='day', y='weight (lbs)')
    plt.xlim([-1, n+1])
    plt.ylim([156.0, 173])
    plt.show()


def predict_using_gain_guess(estimated_weight, init_gain_rate, do_print=False):
    # storage for the filtered results
    estimates, predictions = [estimated_weight], []
    gain_rate = init_gain_rate

    for z in weights:
        # predict new position
        predicted_weight = estimated_weight + gain_rate*time_step
        # update step
        residual = z - predicted_weight
        gain_rate = gain_rate + gain_scale * (residual/time_step)
        # update filter
        estimated_weight = predicted_weight + \
            weight_scale * residual
        # save and log
        estimates.append(estimated_weight)
        predictions.append(predicted_weight)
        if do_print:
            print("previous estimate: %8.2f, prediction: %8.2f, estimate: %8.2f" % (
                estimated_weight, predicted_weight, estimated_weight))
            print()
    return estimates, predictions


initial_estimate = 160
estimates, predictions = predict_using_gain_guess(
    estimated_weight=initial_estimate, init_gain_rate=-1, do_print=True)
print(weights)
plot_gh_results(weights, estimates, predictions, [160, 172])
